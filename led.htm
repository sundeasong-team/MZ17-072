<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\led.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\led.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060061: Last Updated: Mon Jul 15 13:47:40 2019
<BR><P>
<H3>Maximum Stack Usage =        352 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; Check &rArr; SetZS &rArr; ServoSetSpeed &rArr; Toyo_Set_Speed &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[16d]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">NMI_Handler</a><BR>
 <LI><a href="#[e]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">HardFault_Handler</a><BR>
 <LI><a href="#[f]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">MemManage_Handler</a><BR>
 <LI><a href="#[10]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">BusFault_Handler</a><BR>
 <LI><a href="#[11]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">UsageFault_Handler</a><BR>
 <LI><a href="#[12]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">SVC_Handler</a><BR>
 <LI><a href="#[13]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13]">DebugMon_Handler</a><BR>
 <LI><a href="#[14]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[14]">PendSV_Handler</a><BR>
 <LI><a href="#[15]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[15]">SysTick_Handler</a><BR>
 <LI><a href="#[2c]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2c]">ADC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2d]">BOD_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[10]">BusFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[38]">CANActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2f]">CAN_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[30]">DMA_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[13]">DebugMon_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[28]">EINT0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[29]">EINT1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2a]">EINT2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2b]">EINT3_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[32]">ENET_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[e]">HardFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[20]">I2C0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[21]">I2C1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[22]">I2C2_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[31]">I2S_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[34]">MCPWM_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[f]">MemManage_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[d]">NMI_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[26]">PLL0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[36]">PLL1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1f]">PWM1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[14]">PendSV_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[35]">QEI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[33]">RIT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[27]">RTC_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[c]">Reset_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[23]">SPI_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[24]">SSP0_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[25]">SSP1_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[12]">SVC_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[15]">SysTick_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[39]">SystemInit</a> from system_lpc17xx.o(.text) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[17]">TIMER0_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[18]">TIMER1_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[19]">TIMER2_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1a]">TIMER3_IRQHandler</a> from timer.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1b]">UART0_IRQHandler</a> from uart.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1c]">UART1_IRQHandler</a> from uart1.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1d]">UART2_IRQHandler</a> from uart2.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[1e]">UART3_IRQHandler</a> from uart3.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[37]">USBActivity_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[2e]">USB_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[11]">UsageFault_Handler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[16]">WDT_IRQHandler</a> from startup_lpc17xx.o(.text) referenced from startup_lpc17xx.o(RESET)
 <LI><a href="#[43]">__main</a> from __main.o(!!!main) referenced from startup_lpc17xx.o(.text)
 <LI><a href="#[3b]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[3f]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[3e]">_sbackspace</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[41]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[3d]">_sgetc</a> from _sgetc.o(.text) referenced from __0sscanf.o(.text)
 <LI><a href="#[3c]">_sputc</a> from _sputc.o(.text) referenced from c89vsprintf.o(.text)
 <LI><a href="#[40]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[42]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[43]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[44]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[46]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[1b1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[1b3]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1b4]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[1b5]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[47]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[14b]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[49]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[4b]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4d]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[4e]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1b6]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))

<P><STRONG><a name="[1b7]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[4f]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[51]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[52]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[53]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[55]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[57]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[5a]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[5b]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[5d]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[1b8]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[5f]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[61]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[63]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[65]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[1b9]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[75]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1ba]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[67]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1bb]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[1bc]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[69]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[1bd]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[1be]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1bf]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[6b]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[1c0]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[1c1]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[6c]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1c2]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1c3]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[1c4]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[1c5]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1c6]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1c7]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[1c8]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[6e]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[1c9]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[1ca]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1cb]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[1cc]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[1cd]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[1ce]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[7a]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[1cf]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[70]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[1d0]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[1d1]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[1d2]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[1d3]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[1d4]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1d5]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[45]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[1d6]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[72]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[74]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[1d7]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[76]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; Check &rArr; SetZS &rArr; ServoSetSpeed &rArr; Toyo_Set_Speed &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[1d8]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[17a]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[79]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[1d9]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[7b]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[c]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1da]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[d]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>CANActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>DMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>ENET_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>MCPWM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>PLL0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>PLL1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>QEI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RIT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>SPI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>SSP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SSP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBActivity_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_lpc17xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[16d]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7d]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringNum
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
</UL>

<P><STRONG><a name="[92]"></a>__aeabi_ldivmod</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printU32
</UL>

<P><STRONG><a name="[7e]"></a>_ll_sdiv</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, llsdiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[1db]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[77]"></a>main</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = main &rArr; Check &rArr; SetZS &rArr; ServoSetSpeed &rArr; Toyo_Set_Speed &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_init
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[86]"></a>UART0_Init</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8f]"></a>putch</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, uart.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>

<P><STRONG><a name="[93]"></a>u0putch</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printU32
</UL>

<P><STRONG><a name="[8e]"></a>Print_String</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putch
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadDown
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadUP
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitID
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHON
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHOFF
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Help
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERUP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERDOWN
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[8b]"></a>Uart_Printf</STRONG> (Thumb, 36 bytes, Stack size 80 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Order_Handle
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromtest
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_check
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_home_status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromwrite
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromread
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_N
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitID
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Test
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motor_Initial_Position
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>printU32</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u0putch
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
</UL>

<P><STRONG><a name="[94]"></a>print_float</STRONG> (Thumb, 164 bytes, Stack size 64 bytes, uart.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printU32
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u0putch
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[1b]"></a>UART0_IRQHandler</STRONG> (Thumb, 132 bytes, Stack size 8 bytes, uart.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[9d]"></a>CharConvert</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, command.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[8c]"></a>Check</STRONG> (Thumb, 3150 bytes, Stack size 16 bytes, command.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352 + Unknown Stack Size
<LI>Call Chain = Check &rArr; SetZS &rArr; ServoSetSpeed &rArr; Toyo_Set_Speed &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ver
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_check
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_home_status
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromwrite
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromread
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writeid
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACON
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACOFF
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_N
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitID
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ServoON
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ServoOFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ClearArm
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_ErrorCode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentPoint
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Initial_Position
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoOrigin
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Test_LC
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Ready_LC
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Test_LC
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ready_LC
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHON
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHOFF
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Test_LC
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Ready_LC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Test
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDON
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOFF
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_ON
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_OFF
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Help
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERUP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERDOWN
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motor_Initial_Position
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZS
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringNum
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder9_On
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder9_Off
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder8_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder8_Off
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder7_On
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder7_Off
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder6_On
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder6_Off
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder5_On
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder5_Off
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder4_On
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder4_Off
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder3_On
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder3_Off
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder2_On
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder2_Off
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder1_On
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder1_Off
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder10_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder10_Off
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_PW_ON
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_PW_OFF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLOW_MIRRORON
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLOW_MIRROROFF
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CharConvert
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a2]"></a>sensor_check</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = sensor_check &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[89]"></a>Motor_init</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = Motor_init &rArr; ServoInitialize &rArr; Toyo_Set_ServoON &rArr; Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInitialize
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_home_status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoOrigin
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b6]"></a>Cylinder10_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder10_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_OFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c7]"></a>ION_OFF</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ION_OFF &rArr; Cylinder10_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder10_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[aa]"></a>Cylinder4_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder4_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHOFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[a7]"></a>Cylinder3_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder3_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHOFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[bd]"></a>PUSHOFF</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PUSHOFF &rArr; Cylinder4_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder4_Off
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder3_On
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[b2]"></a>Cylinder8_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder8_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[af]"></a>Cylinder7_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder7_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c0]"></a>HOLDERON</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOLDERON &rArr; Cylinder8_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder8_Off
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder7_On
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[ae]"></a>Cylinder6_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder6_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERUP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[ab]"></a>Cylinder5_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder5_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERUP
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[be]"></a>HOLDERUP</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOLDERUP &rArr; Cylinder6_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder6_Off
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder5_On
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[a6]"></a>Cylinder2_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder2_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[bb]"></a>LEDOFF</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LEDOFF &rArr; Cylinder2_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder2_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[b3]"></a>Cylinder9_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder9_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_PW_ON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c2]"></a>CM_PW_ON</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM_PW_ON &rArr; Cylinder9_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder9_On
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[e8]"></a>Cylinder11_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder11_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLOW_MIRRORON
</UL>

<P><STRONG><a name="[c4]"></a>BLOW_MIRRORON</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLOW_MIRRORON &rArr; Cylinder11_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder11_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[a4]"></a>Cylinder1_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder1_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACOFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[b9]"></a>VACOFF</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VACOFF &rArr; Cylinder1_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder1_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[8a]"></a>fixture_init</STRONG> (Thumb, 734 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = fixture_init &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACOFF
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHOFF
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOFF
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_OFF
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERUP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_PW_ON
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLOW_MIRRORON
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e9]"></a>PadUP</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>

<P><STRONG><a name="[ea]"></a>PadDown</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>

<P><STRONG><a name="[a3]"></a>Cylinder1_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder1_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[a5]"></a>Cylinder2_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder2_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[a8]"></a>Cylinder3_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder3_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[a9]"></a>Cylinder4_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder4_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[ac]"></a>Cylinder5_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder5_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERDOWN
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[ad]"></a>Cylinder6_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder6_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERDOWN
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[b0]"></a>Cylinder7_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder7_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[b1]"></a>Cylinder8_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder8_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[b4]"></a>Cylinder9_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder9_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CM_PW_OFF
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[b5]"></a>Cylinder10_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder10_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_ON
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[eb]"></a>Cylinder11_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Cylinder11_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLOW_MIRROROFF
</UL>

<P><STRONG><a name="[ec]"></a>Cylinder12_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[ed]"></a>Cylinder12_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[ee]"></a>Cylinder13_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[ef]"></a>Cylinder13_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[f0]"></a>Cylinder14_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[f1]"></a>Cylinder14_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[f2]"></a>Cylinder15_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[f3]"></a>Cylinder15_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[f4]"></a>Cylinder16_On</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[f5]"></a>Cylinder16_Off</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
</UL>

<P><STRONG><a name="[b8]"></a>VACON</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = VACON &rArr; Cylinder1_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder1_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[ba]"></a>LEDON</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LEDON &rArr; Cylinder2_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder2_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[bc]"></a>PUSHON</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = PUSHON &rArr; Cylinder4_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder4_On
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder3_Off
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[bf]"></a>HOLDERDOWN</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOLDERDOWN &rArr; Cylinder6_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder6_On
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder5_Off
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c1]"></a>HOLDEROFF</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HOLDEROFF &rArr; Cylinder8_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder8_On
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder7_Off
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c3]"></a>CM_PW_OFF</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CM_PW_OFF &rArr; Cylinder9_Off &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder9_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c6]"></a>ION_ON</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ION_ON &rArr; Cylinder10_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder10_On
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c5]"></a>BLOW_MIRROROFF</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BLOW_MIRROROFF &rArr; Cylinder11_On &rArr; PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder11_On
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[d7]"></a>Move_Test_LC</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Move_Test_LC &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[d8]"></a>Move_Ready_LC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Move_Ready_LC &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[c9]"></a>reset</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = reset &rArr; Move_Test_LC &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACOFF
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHOFF
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Test_LC
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Ready_LC
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDOFF
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_ON
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERUP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLOW_MIRRORON
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[cb]"></a>Help</STRONG> (Thumb, 1276 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Help &rArr; Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[f7]"></a>set_vtorch_fw_number</STRONG> (Thumb, 240 bytes, Stack size 72 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>

<P><STRONG><a name="[ca]"></a>ver</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ver &rArr; Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[e3]"></a>Writeid</STRONG> (Thumb, 852 bytes, Stack size 80 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Writeid &rArr; AT24C128_W &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[9f]"></a>UnitID</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = UnitID &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[e4]"></a>set_hw_number</STRONG> (Thumb, 290 bytes, Stack size 64 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = set_hw_number &rArr; pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[fe]"></a>set_fw_number</STRONG> (Thumb, 292 bytes, Stack size 64 bytes, control.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[cf]"></a>GetStringNum</STRONG> (Thumb, 72 bytes, Stack size 72 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GetStringNum &rArr; __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[8d]"></a>key_scan</STRONG> (Thumb, 264 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = key_scan &rArr; Move_Test_LC &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sensor_check
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACON
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHON
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Test_LC
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Ready_LC
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDON
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_OFF
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERDOWN
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLOW_MIRROROFF
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c8]"></a>GO_HOME</STRONG> (Thumb, 190 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = GO_HOME &rArr; Move_Test_LC &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VACON
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHON
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Test_LC
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Ready_LC
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LEDON
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_ON
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERDOWN
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[cc]"></a>SetZS</STRONG> (Thumb, 222 bytes, Stack size 72 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = SetZS &rArr; ServoSetSpeed &rArr; Toyo_Set_Speed &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoSetSpeed
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveZS
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[cd]"></a>GetZS</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = GetZS &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZSValue
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[d5]"></a>Set_Motor_Initial_Position</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Set_Motor_Initial_Position &rArr; Set_Z_Initial_Position &rArr; Get_Z_Initial_Position &rArr; AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Z_Initial_Position
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[d0]"></a>Up_N</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Up_N &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[e2]"></a>Motor_Test</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, control.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = Motor_Test &rArr; ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[104]"></a>I2C_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PutAck
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Init
</UL>

<P><STRONG><a name="[108]"></a>SDA</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iic.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetAck
</UL>

<P><STRONG><a name="[82]"></a>I2C_Init</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[105]"></a>I2C_Start</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>

<P><STRONG><a name="[106]"></a>I2C_Write</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Puts
</UL>

<P><STRONG><a name="[107]"></a>I2C_GetAck</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_GetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Puts
</UL>

<P><STRONG><a name="[109]"></a>I2C_Stop</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Puts
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>

<P><STRONG><a name="[10a]"></a>I2C_Puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_GetAck
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>

<P><STRONG><a name="[10b]"></a>I2C_PutAck</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C_PutAck
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>

<P><STRONG><a name="[10c]"></a>I2C_Read</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, iic.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>

<P><STRONG><a name="[fd]"></a>AT24C128_R</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_PutAck
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Puts
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromtest
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R_P
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Z_Initial_Position
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZSValue
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromread
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnitID
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Test_LC
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ready_LC
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[10d]"></a>Get_Z_Initial_Position</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Get_Z_Initial_Position &rArr; AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Z_Initial_Position
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Motor_Initial_Position
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[102]"></a>GetZSValue</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GetZSValue &rArr; AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZS
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[d4]"></a>Read_Ready_LC</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_Ready_LC &rArr; AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[d2]"></a>Read_Test_LC</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Read_Test_LC &rArr; AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[10e]"></a>AT24C128_R_P</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = AT24C128_R_P &rArr; AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_config
</UL>

<P><STRONG><a name="[88]"></a>init_config</STRONG> (Thumb, 290 bytes, Stack size 8 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = init_config &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R_P
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Z_Initial_Position
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetZSValue
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Test_LC
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Ready_LC
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[10f]"></a>IICDelay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, 24c128.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
</UL>

<P><STRONG><a name="[fc]"></a>AT24C128_W</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = AT24C128_W &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICDelay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Puts
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Z_Initial_Position
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveZS
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writeid
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Test_LC
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Save_Ready_LC
</UL>

<P><STRONG><a name="[fa]"></a>AT24C128_W_P</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = AT24C128_W_P &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IICDelay
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Puts
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromtest
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eepromwrite
</UL>

<P><STRONG><a name="[110]"></a>eepromtest</STRONG> (Thumb, 124 bytes, Stack size 112 bytes, 24c128.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>

<P><STRONG><a name="[a0]"></a>eepromwrite</STRONG> (Thumb, 52 bytes, Stack size 48 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = eepromwrite &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W_P
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[a1]"></a>eepromread</STRONG> (Thumb, 74 bytes, Stack size 48 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = eepromread &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_R
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[d1]"></a>Save_Test_LC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Save_Test_LC &rArr; AT24C128_W &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[d3]"></a>Save_Ready_LC</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Save_Ready_LC &rArr; AT24C128_W &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[100]"></a>SaveZS</STRONG> (Thumb, 220 bytes, Stack size 16 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SaveZS &rArr; AT24C128_W &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
</UL>

<P><STRONG><a name="[d6]"></a>Get_Motor_Initial_Position</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = Get_Motor_Initial_Position &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Z_Initial_Position
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[103]"></a>Set_Z_Initial_Position</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, 24c128.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Set_Z_Initial_Position &rArr; Get_Z_Initial_Position &rArr; AT24C128_R &rArr; I2C_Puts &rArr; I2C_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Z_Initial_Position
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24C128_W
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Motor_Initial_Position
</UL>

<P><STRONG><a name="[80]"></a>delay_init</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e7]"></a>delay_ms</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHON
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSHOFF
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Test
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_ON
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ION_OFF
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERUP
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERON
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDEROFF
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HOLDERDOWN
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GO_HOME
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
</UL>

<P><STRONG><a name="[129]"></a>delay_us</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Print_String
</UL>

<P><STRONG><a name="[12b]"></a>Delay_US</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, delay.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendDat
</UL>

<P><STRONG><a name="[e5]"></a>Delay_MS</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, delay.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Order_Handle
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Go_AssignPoint
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Flag
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoSetSpeed
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInitialize
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_home_status
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoOrigin
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_init
</UL>

<P><STRONG><a name="[111]"></a>Sensor_IO_Init</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[112]"></a>Start_IO_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[114]"></a>Relay_IO_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[113]"></a>Cylinder_IO_Init</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[1de]"></a>MOTOR_IO_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, io.o(.text), UNUSED)

<P><STRONG><a name="[115]"></a>RS485_IO_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, io.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IO_Init
</UL>

<P><STRONG><a name="[81]"></a>IO_Init</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RS485_IO_Init
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder_IO_Init
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Relay_IO_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_IO_Init
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1df]"></a>UART1_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart1.o(.text), UNUSED)

<P><STRONG><a name="[117]"></a>Uart1_putch</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Print_String
</UL>

<P><STRONG><a name="[116]"></a>Uart1_Print_String</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Printf
</UL>

<P><STRONG><a name="[118]"></a>Uart1_Printf</STRONG> (Thumb, 36 bytes, Stack size 88 bytes, uart1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Print_String
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[1c]"></a>UART1_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e0]"></a>delayMs</STRONG> (Thumb, 202 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[17]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIMER2_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIMER3_IRQHandler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, timer.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e1]"></a>enable_timer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>disable_timer</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[1e3]"></a>reset_timer</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)

<P><STRONG><a name="[119]"></a>init_timer</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
</UL>

<P><STRONG><a name="[124]"></a>ChrToInt</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, toyocontrol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Get_String
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Print_String
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_ErrorCode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentPoint
</UL>

<P><STRONG><a name="[11c]"></a>Clear_Rx_String</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, toyocontrol.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentStatus
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Flag
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCompare
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_ErrorCode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentPoint
</UL>

<P><STRONG><a name="[11b]"></a>StringCompare</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = StringCompare
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rx_String
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
</UL>

<P><STRONG><a name="[11d]"></a>Get_Send_Command</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Print_String
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCompare
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rx_String
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Go_Origin
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ServoON
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ServoOFF
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ClearArm
</UL>

<P><STRONG><a name="[db]"></a>Toyo_Set_ServoON</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Toyo_Set_ServoON &rArr; Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInitialize
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[dc]"></a>Toyo_Set_ServoOFF</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Toyo_Set_ServoOFF &rArr; Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[11f]"></a>Toyo_Go_Origin</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Toyo_Go_Origin &rArr; Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoOrigin
</UL>

<P><STRONG><a name="[120]"></a>Get_Send_WData</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Print_String
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringCompare
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rx_String
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print_String
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Go_AssignPoint
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_Speed
</UL>

<P><STRONG><a name="[121]"></a>Toyo_Set_Speed</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Toyo_Set_Speed &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoSetSpeed
</UL>

<P><STRONG><a name="[df]"></a>Toyo_Set_ClearArm</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = Toyo_Set_ClearArm &rArr; Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
</UL>
<BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoInitialize
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[122]"></a>Get_Send_Flag</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Get_Send_Flag &rArr; Uart2_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Print_String
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rx_String
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentStatus
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_ErrorCode
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentPoint
</UL>

<P><STRONG><a name="[123]"></a>Toyo_Read_CurrentStatus</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Toyo_Read_CurrentStatus &rArr; Get_Send_Flag &rArr; Uart2_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Flag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rx_String
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Order_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_home_status
</UL>

<P><STRONG><a name="[e0]"></a>Toyo_Read_CurrentPoint</STRONG> (Thumb, 162 bytes, Stack size 56 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Toyo_Read_CurrentPoint &rArr; Get_Send_Flag &rArr; Uart2_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Flag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rx_String
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Time_Order_Handle
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_Motor_LC_Status
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[dd]"></a>Toyo_Read_ErrorCode</STRONG> (Thumb, 100 bytes, Stack size 40 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Toyo_Read_ErrorCode &rArr; Get_Send_Flag &rArr; Uart2_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Flag
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_Rx_String
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_home_status
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[125]"></a>Toyo_Go_AssignPoint</STRONG> (Thumb, 456 bytes, Stack size 56 bytes, toyocontrol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ServoGoAssignPoint
</UL>

<P><STRONG><a name="[e6]"></a>ServoInitialize</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, repeathandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ServoInitialize &rArr; Toyo_Set_ServoON &rArr; Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ServoON
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_ClearArm
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_init
</UL>

<P><STRONG><a name="[d9]"></a>ServoGoOrigin</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, repeathandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = ServoGoOrigin &rArr; Toyo_Go_Origin &rArr; Get_Send_Command &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Go_Origin
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[101]"></a>ServoSetSpeed</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, repeathandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = ServoSetSpeed &rArr; Toyo_Set_Speed &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Set_Speed
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
</UL>

<P><STRONG><a name="[e1]"></a>ServoGoAssignPoint</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, repeathandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = ServoGoAssignPoint &rArr; Toyo_Go_AssignPoint &rArr; Get_Send_WData &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Go_AssignPoint
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadDown
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadUP
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_N
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Test_LC
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Ready_LC
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_Test
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[de]"></a>read_home_status</STRONG> (Thumb, 184 bytes, Stack size 8 bytes, repeathandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = read_home_status &rArr; Uart_Printf &rArr; __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_ErrorCode
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Motor_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[127]"></a>Time_Order_Handle</STRONG> (Thumb, 408 bytes, Stack size 8 bytes, repeathandle.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentPoint
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
</UL>

<P><STRONG><a name="[da]"></a>Toyo_Read_Motor_LC_Status</STRONG> (Thumb, 452 bytes, Stack size 8 bytes, repeathandle.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Toyo_Read_Motor_LC_Status &rArr; Toyo_Read_CurrentPoint &rArr; Get_Send_Flag &rArr; Uart2_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_MS
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Read_CurrentPoint
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadDown
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PadUP
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Up_N
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Test_LC
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Move_Ready_LC
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fixture_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[1e4]"></a>Iabs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, repeathandle.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>UART2_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART2_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[128]"></a>UART2_SendByte</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uart2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendDat
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Print_String
</UL>

<P><STRONG><a name="[11e]"></a>Uart2_Print_String</STRONG> (Thumb, 232 bytes, Stack size 96 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Uart2_Print_String
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendByte
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChrToInt
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Printf
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Flag
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_WData
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Send_Command
</UL>

<P><STRONG><a name="[12a]"></a>UART2_SendDat</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_SendByte
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_US
</UL>

<P><STRONG><a name="[12c]"></a>Uart2_Printf</STRONG> (Thumb, 36 bytes, Stack size 88 bytes, uart2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Print_String
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[12d]"></a>UART2_Get_String</STRONG> (Thumb, 244 bytes, Stack size 32 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART2_Get_String
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ChrToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_IRQHandler
</UL>

<P><STRONG><a name="[1d]"></a>UART2_IRQHandler</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, uart2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = UART2_IRQHandler &rArr; UART2_Get_String
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Get_String
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[12e]"></a>I2C1_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iic1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Read
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_PutAck
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetAck
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Write
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Start
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Init
</UL>

<P><STRONG><a name="[132]"></a>SDA1</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iic1.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetAck
</UL>

<P><STRONG><a name="[83]"></a>I2C1_Init</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, iic1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C1_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12f]"></a>I2C1_Start</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, iic1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C1_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Init
</UL>

<P><STRONG><a name="[130]"></a>I2C1_Write</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, iic1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Puts
</UL>

<P><STRONG><a name="[131]"></a>I2C1_GetAck</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, iic1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C1_GetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Puts
</UL>

<P><STRONG><a name="[133]"></a>I2C1_Stop</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, iic1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C1_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Puts
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Init
</UL>

<P><STRONG><a name="[134]"></a>I2C1_Puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iic1.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Stop
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_GetAck
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_OUT
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Init
</UL>

<P><STRONG><a name="[135]"></a>I2C1_PutAck</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, iic1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Delay
</UL>

<P><STRONG><a name="[136]"></a>I2C1_Read</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, iic1.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA1
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Delay
</UL>

<P><STRONG><a name="[137]"></a>I2C2_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, iic2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_PutAck
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GetAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Write
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Init
</UL>

<P><STRONG><a name="[13b]"></a>SDA2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, iic2.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GetAck
</UL>

<P><STRONG><a name="[84]"></a>I2C2_Init</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, iic2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C2_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[138]"></a>I2C2_Start</STRONG> (Thumb, 156 bytes, Stack size 4 bytes, iic2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C2_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Input
</UL>

<P><STRONG><a name="[139]"></a>I2C2_Write</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, iic2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C2_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Puts
</UL>

<P><STRONG><a name="[13a]"></a>I2C2_GetAck</STRONG> (Thumb, 126 bytes, Stack size 4 bytes, iic2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C2_GetAck
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Puts
</UL>

<P><STRONG><a name="[13c]"></a>I2C2_Stop</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, iic2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = I2C2_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Puts
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Input
</UL>

<P><STRONG><a name="[13d]"></a>I2C2_Puts</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, iic2.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C2_Puts &rArr; I2C2_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_GetAck
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Input
</UL>

<P><STRONG><a name="[13e]"></a>I2C2_PutAck</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, iic2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Delay
</UL>

<P><STRONG><a name="[13f]"></a>I2C2_Read</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, iic2.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDA2
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PCA9655E_Input
</UL>

<P><STRONG><a name="[85]"></a>PCA9655E_Init</STRONG> (Thumb, 160 bytes, Stack size 8 bytes, pca9655e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PCA9655E_Init &rArr; I2C2_Puts &rArr; I2C2_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Puts
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Puts
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>PCA9655E_OUT</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, pca9655e.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PCA9655E_OUT &rArr; I2C1_Puts &rArr; I2C1_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Puts
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Stop
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C1_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder16_Off
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder16_On
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder15_Off
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder15_On
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder14_Off
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder14_On
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder13_Off
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder13_On
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder12_Off
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder12_On
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder11_On
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder11_Off
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder9_On
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder9_Off
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder8_On
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder8_Off
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder7_On
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder7_Off
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder6_On
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder6_Off
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder5_On
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder5_Off
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder4_On
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder4_Off
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder3_On
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder3_Off
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder2_On
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder2_Off
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder1_On
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder1_Off
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder10_On
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cylinder10_Off
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[140]"></a>PCA9655E_Input</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, pca9655e.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Read
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Puts
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Stop
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C2_Start
</UL>

<P><STRONG><a name="[1e5]"></a>UART3_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, uart3.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>Uart3_putch</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Print_String
</UL>

<P><STRONG><a name="[141]"></a>Uart3_Print_String</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_putch
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Printf
</UL>

<P><STRONG><a name="[143]"></a>Uart3_Printf</STRONG> (Thumb, 36 bytes, Stack size 88 bytes, uart3.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Print_String
</UL>

<P><STRONG><a name="[1e]"></a>UART3_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, uart3.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(RESET)
</UL>
<P><STRONG><a name="[1e6]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 306 bytes, Stack size 0 bytes, system_lpc17xx.o(.text), UNUSED)

<P><STRONG><a name="[39]"></a>SystemInit</STRONG> (Thumb, 292 bytes, Stack size 0 bytes, system_lpc17xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_lpc17xx.o(.text)
</UL>
<P><STRONG><a name="[90]"></a>__c89vsprintf</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, c89vsprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __c89vsprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart2_Printf
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_Printf
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart_Printf
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart3_Printf
</UL>

<P><STRONG><a name="[f6]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reset
</UL>

<P><STRONG><a name="[50]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[149]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[ff]"></a>__0sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, __0sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __0sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStringNum
</UL>

<P><STRONG><a name="[14d]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[f8]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writeid
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[ce]"></a>strncmp</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
</UL>

<P><STRONG><a name="[126]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Toyo_Go_AssignPoint
</UL>

<P><STRONG><a name="[1e7]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e8]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[fb]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Writeid
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[1ea]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1eb]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1ec]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[9e]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[1ed]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[9]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[8]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_sdiv
</UL>

<P><STRONG><a name="[1ee]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[14f]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[151]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[153]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[154]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[146]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[147]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[152]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[148]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[48]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[144]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>

<P><STRONG><a name="[3c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> c89vsprintf.o(.text)
</UL>
<P><STRONG><a name="[145]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[156]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[58]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[159]"></a>_printf_longlong_oct</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[54]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[5c]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[15a]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[56]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[5e]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[4a]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[14e]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>

<P><STRONG><a name="[14c]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sscanf
</UL>

<P><STRONG><a name="[3d]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[3e]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> __0sscanf.o(.text)
</UL>
<P><STRONG><a name="[1ef]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1f0]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1f1]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1f2]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[42]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1f3]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[164]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[60]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[62]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[165]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[64]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[66]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[15b]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __vfscanf &rArr; _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[155]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[6f]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[71]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[157]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[16b]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[179]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[184]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1f4]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[183]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[1f5]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[172]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[73]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[16a]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[163]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[15d]"></a>_btod_etento</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[16f]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[195]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1f6]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[166]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[177]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[169]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1f7]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[78]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[167]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[16e]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[1f8]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[1f9]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[17d]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[17f]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[68]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[174]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[176]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1fa]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[171]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[175]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[178]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[170]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[17c]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[17b]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[7c]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[181]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[a]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[17e]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[182]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1fb]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[185]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[180]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[186]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[187]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[15e]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[189]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[188]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[18a]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[18b]"></a>_e2e</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[15f]"></a>_btod_ediv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[160]"></a>_btod_emul</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[18c]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[162]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[18d]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[18e]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[190]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[191]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[192]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[194]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[14a]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[40]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[97]"></a>pow</STRONG> (Thumb, 2512 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = pow &rArr; sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
</UL>

<P><STRONG><a name="[196]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[3b]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[6d]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[9a]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
</UL>

<P><STRONG><a name="[19b]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[19e]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
</UL>

<P><STRONG><a name="[1a1]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[1a6]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[18f]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a3]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
</UL>

<P><STRONG><a name="[1a4]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1fc]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[96]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
</UL>

<P><STRONG><a name="[1fd]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[1fe]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[1a5]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[1a9]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_fw_number
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_vtorch_fw_number
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_hw_number
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetZS
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a7]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[19d]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[1a0]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[199]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1a8]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[198]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1aa]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[19a]"></a>_dsqrt</STRONG> (Thumb, 456 bytes, Stack size 24 bytes, dsqrt_noumaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[197]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ac]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
</UL>

<P><STRONG><a name="[1ad]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_f2uiz</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_float
</UL>

<P><STRONG><a name="[1af]"></a>_ffixu</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, ffixu.o(x$fpl$ffixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
</UL>

<P><STRONG><a name="[1ae]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ffixu
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[19c]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[4c]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1a2]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[193]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1b0]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[11a]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, timer.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_timer
</UL>

<P><STRONG><a name="[1ab]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[19f]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[3f]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[41]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[15c]"></a>_fp_digits</STRONG> (Thumb, 428 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
